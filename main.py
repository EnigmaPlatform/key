# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import sys
import re
import pickle
import os
import shutil
from datetime import datetime

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_HASH = "f6f5431d25bbf7b12e8add9af5e3475c44a0a5b8"
TEST_KEY = "0000000000000000000000000000000000000000000000000000000000000001"
TEST_HASH = "751e76e8199196d454941c45d1b3a323f1433bd6"
PROGRESS_STEP = 1000000  # –®–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
SKIP_UPDATE_INTERVAL = 500000  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤
MIN_UPDATE_INTERVAL = 0.1  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ (—Å–µ–∫)
AUTOSAVE_INTERVAL = 100_000_000 # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 100M –æ–ø–µ—Ä–∞—Ü–∏–π
MIN_SAVE_INTERVAL = 600  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è–º–∏ (—Å–µ–∫)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤
THREAD_CONFIG = {
    0: {'start': 0x40102a304dad1b5a80, 'end': 0x480102a304dad1b5a8, 'current': None, 'processed': 0, 'skipped': 0},
    1: {'start': 0x480102a304dad1b5a8, 'end': 0x50102a304dad1b5a80, 'current': None, 'processed': 0, 'skipped': 0},
    2: {'start': 0x50102a304dad1b5a80, 'end': 0x580102a304dad1b5a8, 'current': None, 'processed': 0, 'skipped': 0},
    3: {'start': 0x580102a304dad1b5a8, 'end': 0x60102a304dad1b5a80, 'current': None, 'processed': 0, 'skipped': 0},
    4: {'start': 0x60102a304dad1b5a80, 'end': 0x680102a304dad1b5a8, 'current': None, 'processed': 0, 'skipped': 0},
    5: {'start': 0x680102a304dad1b5a8, 'end': 0x70102a304dad1b5a80, 'current': None, 'processed': 0, 'skipped': 0},
    6: {'start': 0x70102a304dad1b5a80, 'end': 0x780102a304dad1b5a8, 'current': None, 'processed': 0, 'skipped': 0},
    7: {'start': 0x780102a304dad1b5a8, 'end': 0x80102a304dad1b5a80, 'current': None, 'processed': 0, 'skipped': 0}
}

# ANSI escape codes
CURSOR_UP = "\033[F"
ERASE_LINE = "\033[K"

def should_skip_key(key_hex):
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 17 —Å–∏–º–≤–æ–ª–∞—Ö"""
    last_17 = key_hex[-17:]
    patterns = [
        r'^[0-9]{17}$',        # –í—Å–µ —Ü–∏—Ñ—Ä—ã
        r'^[a-f]{17}$',        # –í—Å–µ –±—É–∫–≤—ã a-f
        r'(.)\1{3}',           # 4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ –ø–æ–¥—Ä—è–¥
        r'([0-9]{5,}|[a-f]{5,})' # 5+ —Ü–∏—Ñ—Ä –∏–ª–∏ –±—É–∫–≤ –ø–æ–¥—Ä—è–¥
    ]
    return any(re.search(pattern, last_17) for pattern in patterns)

def run_hash_test():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print("\n" + "="*60)
    print("üîß –ü–û–õ–ù–´–ô –¢–ï–°–¢ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø")
    print("="*60)
    
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {TEST_KEY}")
    
    try:
        key_bytes = bytes.fromhex(TEST_KEY)
        pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
        print(f"\n1. –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (—Å–∂–∞—Ç—ã–π): {pub_key.hex()}")
        
        sha256_hash = hashlib.sha256(pub_key).digest()
        print(f"2. SHA256: {sha256_hash.hex()}")
        
        ripemd160 = hashlib.new('ripemd160', sha256_hash).hexdigest()
        print(f"3. RIPEMD160: {ripemd160}")
        
        print(f"\n–û–∂–∏–¥–∞–µ–º—ã–π RIPEMD160: {TEST_HASH}")
        test_passed = ripemd160 == TEST_HASH
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù' if test_passed else '‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù'}")
        return test_passed
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ï: {str(e)}")
        return False

def run_filter_tests():
    """–ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π"""
    print("\n" + "="*60)
    print("üîç –ü–û–õ–ù–´–ô –¢–ï–°–¢ –§–ò–õ–¨–¢–†–ê –ö–õ–Æ–ß–ï–ô")
    print("="*60)
    
    test_cases = [
        ("0000000000000000000000000000000000000000000000000000000000000000", True, "–í—Å–µ —Ü–∏—Ñ—Ä—ã"),
        ("abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcd", True, "–í—Å–µ –±—É–∫–≤—ã a-f"),
        ("aaaa1234567890abc1234567890abc1234567890abc1234567890abc123456", True, "4+ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞"),
        ("1234555556789012345678901234567890123456789012345678901234567890", True, "5+ —Ü–∏—Ñ—Ä –ø–æ–¥—Ä—è–¥"),
        ("abcddeeeef1234567890abc1234567890abc1234567890abc1234567890abcd", True, "5+ –±—É–∫–≤ –ø–æ–¥—Ä—è–¥"),
        ("a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a", False, "–ù–æ—Ä–º–∞–ª—å–Ω—ã–π –∫–ª—é—á"),
        ("0000000000000000000000000000000000000000000004c5ce114686a1336e07", True, "–ü—Ä–∏–º–µ—Ä 1"),
        ("00000000000000000000000000000000000000000000000730fc235c1942c1ae", False, "–ü—Ä–∏–º–µ—Ä 2")
    ]
    
    print("–¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏:")
    print("-"*60)
    all_passed = True
    
    for key, should_skip, description in test_cases:
        result = should_skip_key(key)
        status = "‚úÖ" if result == should_skip else "‚ùå"
        if status == "‚ùå":
            all_passed = False
        
        print(f"{status} {description}:")
        print(f"–ö–ª—é—á: ...{key[-17:]}")
        print(f"–û–∂–∏–¥–∞–ª–æ—Å—å: {'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' if should_skip else '–ü—Ä–∏–Ω—è—Ç—å'}")
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏: {'–ü—Ä–æ–ø—É—â–µ–Ω' if result else '–ü—Ä–∏–Ω—è—Ç'}")
        print("-"*60)
    
    print(f"\n–ò—Ç–æ–≥ —Ç–µ—Å—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {'‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´' if all_passed else '‚ùå –ï–°–¢–¨ –û–®–ò–ë–ö–ò'}")
    return all_passed

class ProgressDisplay:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    def __init__(self, num_threads):
        self.num_threads = num_threads
        self.last_update = time.time()
        self.init_display()
    
    def init_display(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–ª–µ—è —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏"""
        print("\n" + "="*60)
        print(f"‚ö° –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–ô | –¶–µ–ª–µ–≤–æ–π —Ö–µ—à: {TARGET_HASH}")
        print("="*60 + "\n")
        print(ERASE_LINE + "–í—Å–µ–≥–æ: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 0 | –ü—Ä–æ–ø—É—â–µ–Ω–æ 0 (0.0%)")
        for tid in range(self.num_threads):
            print(ERASE_LINE + f"–ü–æ—Ç–æ–∫ {tid}: 0 keys (0.0/s) | 0x...")
        sys.stdout.flush()
    
    def update(self, thread_id, processed, current_key, speed, force=False):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–∞—Å—Ç–æ—Ç—ã"""
        now = time.time()
        if not force and now - self.last_update < MIN_UPDATE_INTERVAL:
            return
            
        total_processed = sum(t['processed'] for t in THREAD_CONFIG.values())
        total_skipped = sum(t['skipped'] for t in THREAD_CONFIG.values())
        total = total_processed + total_skipped
        skipped_percent = total_skipped / total * 100 if total > 0 else 0
        
        print(CURSOR_UP * (self.num_threads + 2), end="")
        print(ERASE_LINE + f"–í—Å–µ–≥–æ: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_processed:,} | –ü—Ä–æ–ø—É—â–µ–Ω–æ {total_skipped:,} ({skipped_percent:.1f}%)")
        
        short_key = f"0x...{current_key[-18:]}" if current_key else "0x..."
        print(ERASE_LINE + f"–ü–æ—Ç–æ–∫ {thread_id}: {processed:,} keys ({speed:.1f}/s) | {short_key}")
        
        print(CURSOR_UP * (self.num_threads - thread_id), end="")
        sys.stdout.flush()
        self.last_update = now

def save_state(filename='progress.pkl'):
    """–£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞"""
    # –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    now = time.time()
    if hasattr(save_state, '_last_call') and now - save_state._last_call < MIN_SAVE_INTERVAL:
        return
    save_state._last_call = now
    
    try:
        # –ê—Ç–æ–º–∞—Ä–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        tempname = filename + '.tmp'
        with open(tempname, 'wb') as f:
            pickle.dump(THREAD_CONFIG, f)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if os.path.exists(filename):
            os.remove(filename)
        
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.rename(tempname, filename)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        total_ops = sum(t['processed'] + t['skipped'] for t in THREAD_CONFIG.values())
        print(f"\nüíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (–≤—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_ops:,})")
        return True
    except Exception as e:
        print(f"\n‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        return False

def load_state(filename='progress.pkl'):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
    try:
        if not os.path.exists(filename):
            print("‚Ñπ –§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞")
            return False
            
        with open(filename, 'rb') as f:
            loaded = pickle.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            if not isinstance(loaded, dict):
                raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                
            for k in THREAD_CONFIG:
                if k in loaded:
                    if not all(key in loaded[k] for key in ['start', 'end', 'current', 'processed', 'skipped']):
                        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Ç–æ–∫–∞ {k}")
                    THREAD_CONFIG[k].update(loaded[k])
        
        total_ops = sum(t['processed'] + t['skipped'] for t in THREAD_CONFIG.values())
        print(f"‚úî –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ (–≤—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {total_ops:,})")
        return True
    except Exception as e:
        print(f"\n‚ö† –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        return False

def process_range(thread_id, progress):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª—é—á–µ–π —Å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º"""
    config = THREAD_CONFIG[thread_id]
    current = config['current'] if config['current'] is not None else config['start']
    end = config['end']
    keys_processed = 0
    keys_skipped = 0
    last_report = time.time()
    last_save_total = 0
    
    progress.update(thread_id, 0, f"{current:064x}", 0, force=True)
    
    while current <= end:
        key_hex = f"{current:064x}"
        is_skipped = should_skip_key(key_hex)
        
        if not is_skipped:
            try:
                pub_key = coincurve.PublicKey.from_secret(bytes.fromhex(key_hex)).format(compressed=True)
                h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hexdigest()
                
                if h == TARGET_HASH:
                    print(f"\nüéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: 0x{key_hex}")
                    save_state()
                    return key_hex
                
                keys_processed += 1
                config['processed'] += 1
                
                if keys_processed % PROGRESS_STEP == 0:
                    speed = PROGRESS_STEP / (time.time() - last_report)
                    progress.update(thread_id, keys_processed, key_hex, speed)
                    last_report = time.time()
                    config['current'] = current
            except Exception as e:
                print(f"\n‚ö† –û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {thread_id}: {str(e)}")
        else:
            keys_skipped += 1
            config['skipped'] += 1
            
            if keys_skipped % SKIP_UPDATE_INTERVAL == 0:
                progress.update(thread_id, keys_processed, key_hex, 0)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ –æ–±—â–µ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –æ–ø–µ—Ä–∞—Ü–∏–π
        total_ops = sum(t['processed'] + t['skipped'] for t in THREAD_CONFIG.values())
        if total_ops - last_save_total >= AUTOSAVE_INTERVAL:
            save_state()
            last_save_total = total_ops
        
        current += 1
    
    config['current'] = None
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    print("üîç –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í...")
    
    if not all([run_hash_test(), run_filter_tests()]):
        print("\n‚ùå –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´. –í–´–ü–û–õ–ù–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û")
        return
    
    print("\n‚è≥ –ó–ê–ì–†–£–ó–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø...")
    load_state()
    
    print("\n‚ö° –ó–ê–ü–£–°–ö –ü–û–ò–°–ö–ê...")
    print(f"–¶–µ–ª–µ–≤–æ–π —Ö–µ—à: {TARGET_HASH}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {len(THREAD_CONFIG)}")
    print(f"–î–∏–∞–ø–∞–∑–æ–Ω: 0x{THREAD_CONFIG[0]['start']:016x} - 0x{THREAD_CONFIG[7]['end']:016x}")
    print(f"–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {AUTOSAVE_INTERVAL:,} –æ–ø–µ—Ä–∞—Ü–∏–π")
    
    start_time = time.time()
    progress = ProgressDisplay(len(THREAD_CONFIG))
    
    try:
        with ProcessPoolExecutor(max_workers=len(THREAD_CONFIG)) as executor:
            futures = {executor.submit(process_range, tid, progress): tid for tid in THREAD_CONFIG}
            
            for future in futures:
                if result := future.result():
                    print(f"\n‚åõ –í–†–ï–ú–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø: {time.time() - start_time:.1f} —Å–µ–∫")
                    save_state()
                    return
    except KeyboardInterrupt:
        print("\n‚èπ –ü–û–ò–°–ö –û–°–¢–ê–ù–û–í–õ–ï–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ú")
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {str(e)}")
    finally:
        save_state()
        print("\n–¢–ï–ö–£–©–ò–ï –ü–û–ó–ò–¶–ò–ò –ü–û–¢–û–ö–û–í:")
        for tid in sorted(THREAD_CONFIG):
            curr = THREAD_CONFIG[tid]['current']
            print(f"–ü–æ—Ç–æ–∫ {tid}: {f'0x{curr:016x}' if curr is not None else '–∑–∞–≤–µ—Ä—à–µ–Ω'}")

if __name__ == "__main__":
    main()
