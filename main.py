# -*- coding: utf-8 -*-
import multiprocessing
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor, as_completed
import time
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_HASH = bytes.fromhex("f6f5431d25bbf7b12e8add9af5e3475c44a0a5b8")
START_KEY = 0x60102a304e0c796a80
END_KEY = 0x80102a304e0c796a80
CHUNK_SIZE = 100000
THREADS = max(1, int(multiprocessing.cpu_count() * 1.5))  # –Ø–¥—Ä–∞ * 1.5
REPORT_INTERVAL = 500_000  # –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–ª–Ω –∫–ª—é—á–µ–π

def process_chunk(start, end, result_queue):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –∫–ª—é—á–µ–π —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    for key_int in range(start, end + 1):
        try:
            key_hex = f"{key_int:064x}"
            key_bytes = bytes.fromhex(key_hex)
            pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
            h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).digest()
            
            if h == TARGET_HASH:
                result_queue.put(('found', key_hex))
                return
                
            if key_int % 1000 == 0:
                result_queue.put(('progress', key_int))
                
        except Exception:
            continue
    result_queue.put(('done', end))

def format_key(key_int):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    return f"{key_int:064x}"

def find_key_parallel():
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    print(f"\n‚ö° –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å {THREADS} –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏")
    print(f"üîç –î–∏–∞–ø–∞–∑–æ–Ω: {hex(START_KEY)}-{hex(END_KEY)}")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ö–µ—à: {TARGET_HASH.hex()}")
    print("–ü–æ–¥–±–æ—Ä –Ω–∞—á–∞–ª—Å—è...")

    manager = multiprocessing.Manager()
    result_queue = manager.Queue()
    start_time = time.time()
    last_report_key = START_KEY
    found_key = None
    last_report_time = start_time

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    with ProcessPoolExecutor(max_workers=THREADS) as executor:
        chunks = [(s, min(s + CHUNK_SIZE - 1, END_KEY)) 
                 for s in range(START_KEY, END_KEY + 1, CHUNK_SIZE)]
        futures = [executor.submit(process_chunk, start, end, result_queue) 
                  for start, end in chunks]
        
        while not found_key and any(not f.done() for f in futures):
            while not result_queue.empty():
                msg_type, data = result_queue.get()
                
                if msg_type == 'progress':
                    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 10 –º–ª–Ω –∫–ª—é—á–µ–π
                    if data - last_report_key >= REPORT_INTERVAL:
                        current_time = time.time()
                        time_diff = current_time - last_report_time
                        speed = REPORT_INTERVAL / max(1, time_diff)
                        
                        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤—ã–≤–æ–¥ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        sys.stdout.write('\033[F\033[K' * 2)  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –Ω–∞ 2 —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö –∏ –æ—á–∏—â–∞–µ–º
                        print(f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed:,.0f} keys/sec")
                        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á: {format_key(data)}")
                        
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
                        last_report_key = data
                        last_report_time = current_time
                        
                elif msg_type == 'found':
                    found_key = data
                    for f in futures:
                        f.cancel()
                    break

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    elapsed = time.time() - start_time
    print(f"\n–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed:.2f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {(END_KEY-START_KEY+1)/max(1, elapsed):,.0f} keys/sec")
    
    if found_key:
        print(f"\nüéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù!")
        print(f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {found_key}")
    else:
        print(f"\nüîç –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    TEST_KEY = 0x349b84b6431a6c4ef1
    test_hex = f"{TEST_KEY:064x}"
    test_bytes = bytes.fromhex(test_hex)
    pub_key = coincurve.PublicKey.from_secret(test_bytes).format(compressed=True)
    sha256_hash = hashlib.sha256(pub_key).digest()
    ripemd160_hash = hashlib.new('ripemd160', sha256_hash).digest()
    test_hash = ripemd160_hash.hex()
    
    print("üîß –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_hex}")
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ö–µ—à: {test_hash}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à: {TARGET_HASH.hex()}")
    print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {test_hash == TARGET_HASH.hex()}\n")

    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    find_key_parallel()
