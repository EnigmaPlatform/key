#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import multiprocessing
import time
import random
import hashlib
import secp256k1
import sys
import numpy as np
from numba import njit
from threading import Lock
from ctypes import c_uint64
from multiprocessing.sharedctypes import Value
import os

# ========== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==========
TARGET_HASH = b"\xf6\xf5\x43\x1d\x25\xbb\xf7\xb1\x2e\x8a\xdd\x9a\xf5\xe3\x47\x5c\x44\xa0\xa5\xb8"
TARGET_PREFIX = TARGET_HASH[:3]
START_RANGE = 0x400000000000000000
END_RANGE = 0x7fffffffffffffffff
NUM_THREADS = min(multiprocessing.cpu_count(), 8)
KEYS_TO_CHECK = 150_000_000
BATCH_SIZE = 100_000
UPDATE_INTERVAL = 0.1  # —Å–µ–∫

# ========== –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –°–ò–°–¢–ï–ú–´ ==========
if sys.platform == 'linux':
    os.nice(-20)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞
    try:
        import ctypes
        libc = ctypes.CDLL('libc.so.6')
        libc.malloc_trim(0)  # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å –¥–ª—è Linux
    except:
        pass

# ========== –ü–†–ï–î–í–ê–†–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–ú–ü–ò–õ–Ø–¶–ò–Ø ==========
TARGET_PREFIX_NP = np.frombuffer(TARGET_PREFIX, dtype=np.uint8)
TARGET_HASH_NP = np.frombuffer(TARGET_HASH, dtype=np.uint8)

@njit(nogil=True, cache=True, fastmath=True, boundscheck=False)
def numba_check_match(digest):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SIMD-–æ–ø–µ—Ä–∞—Ü–∏–π"""
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–≤—ã—Ö 3 –±–∞–π—Ç
    if (digest[0] ^ TARGET_PREFIX_NP[0]) | \
       (digest[1] ^ TARGET_PREFIX_NP[1]) | \
       (digest[2] ^ TARGET_PREFIX_NP[2]):
        return False
    
    # –í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∞–π—Ç
    for i in range(3, len(TARGET_HASH_NP)):
        if digest[i] != TARGET_HASH_NP[i]:
            return False
    return True

# ========== –ö–õ–ê–°–°–´ –î–õ–Ø –£–ü–†–ê–í–õ–ï–ù–ò–Ø ==========
class SpeedTracker:
    __slots__ = ['total_keys', 'counter', 'last_time', 'speed', 'lock', 'samples', 'idx']
    
    def __init__(self, total_keys):
        self.total_keys = total_keys
        self.counter = Value(c_uint64, 0)
        self.last_time = Value('d', time.time())
        self.speed = Value('d', 0.0)
        self.lock = Lock()
        self.samples = multiprocessing.Array('d', [0.0]*5)
        self.idx = 0

    def update(self, count):
        with self.lock:
            if self.counter.value >= self.total_keys:
                return
                
            self.counter.value += count
            now = time.time()
            time_diff = now - self.last_time.value
            
            if time_diff > 0:
                current_speed = count / time_diff
                self.samples[self.idx % 5] = current_speed
                self.idx += 1
                self.speed.value = sum(self.samples) / min(5, self.idx)
                self.last_time.value = now

    def get_stats(self):
        with self.lock:
            return self.counter.value, self.speed.value

    def should_stop(self):
        with self.lock:
            return self.counter.value >= self.total_keys

class WorkBalancer:
    __slots__ = ['position', 'end', 'lock']
    
    def __init__(self, start, end):
        self.position = Value(c_uint64, start)
        self.end = end
        self.lock = Lock()

    def get_next_batch(self):
        with self.lock:
            current = self.position.value
            if current >= self.end:
                return None, 0
            
            batch_size = min(BATCH_SIZE, self.end - current)
            self.position.value += batch_size
            return current, batch_size

# ========== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def double_hash(data):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏"""
    sha = hashlib.sha256(data).digest()
    rmd = hashlib.new('ripemd160', sha).digest()
    return rmd

def worker(balancer, progress, found_flag, found_key):
    """–†–∞–±–æ—á–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º"""
    ctx = secp256k1.lib.secp256k1_context_create(
        secp256k1.lib.SECP256K1_CONTEXT_SIGN | 
        secp256k1.lib.SECP256K1_CONTEXT_VERIFY)
    
    # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
    digest_buffer = np.empty(20, dtype=np.uint8)
    
    try:
        while not found_flag.value and not progress.should_stop():
            batch = balancer.get_next_batch()
            if not batch or not batch[1]:
                break
                
            current, batch_size = batch
            count = 0
            
            for i in range(current, current + batch_size):
                if found_flag.value or progress.should_stop():
                    break
                    
                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥: –ø—Ä—è–º–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ bytes
                private_key = i.to_bytes(32, 'big')
                private_key_c = secp256k1.ffi.new("unsigned char [32]", private_key)
                
                pubkey = secp256k1.ffi.new('secp256k1_pubkey *')
                if not secp256k1.lib.secp256k1_ec_pubkey_create(ctx, pubkey, private_key_c):
                    continue
                
                out = secp256k1.ffi.new('unsigned char [33]')
                out_len = secp256k1.ffi.new('size_t *', 33)
                
                secp256k1.lib.secp256k1_ec_pubkey_serialize(
                    ctx, out, out_len, pubkey, secp256k1.lib.SECP256K1_EC_COMPRESSED)
                
                pubkey_bytes = bytes(secp256k1.ffi.buffer(out, 33))
                
                if pubkey_bytes:
                    ripemd160 = double_hash(pubkey_bytes)
                    digest_buffer[:] = np.frombuffer(ripemd160, dtype=np.uint8)
                    
                    if numba_check_match(digest_buffer):
                        with found_key.get_lock():
                            found_key.value = i
                        found_flag.value = True
                        break
                
                count += 1
            
            if count > 0:
                progress.update(count)
    finally:
        secp256k1.lib.secp256k1_context_destroy(ctx)

def display_progress(progress, found_flag):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—ã–≤–æ–¥–∞–º–∏"""
    start_time = time.time()
    last_speeds = []
    terminal_width = 80
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏
    sys.stdout.write("\r" + " " * terminal_width)
    sys.stdout.flush()
    
    while not found_flag.value and not progress.should_stop():
        completed, speed = progress.get_stats()
        elapsed = max(0.1, time.time() - start_time)
        percent = min(100.0, completed / KEYS_TO_CHECK * 100)
        
        # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–µ —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        if not last_speeds:
            last_speeds.append(speed)
        else:
            last_speeds.append(0.8 * last_speeds[-1] + 0.2 * speed)
        
        if len(last_speeds) > 5:
            last_speeds.pop(0)
        avg_speed = last_speeds[-1]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_text = (
            f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {percent:.2f}% | "
            f"–í—Ä–µ–º—è: {elapsed:.1f}s | "
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {avg_speed/1000:.1f}K keys/s | "
            f"–ö–ª—é—á–µ–π: {completed:,}"
        )
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        sys.stdout.write("\r" + progress_text.ljust(terminal_width))
        sys.stdout.flush()
        
        time.sleep(UPDATE_INTERVAL)
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏
    sys.stdout.write("\r" + " " * terminal_width + "\r")
    sys.stdout.flush()

def test_hashing():
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è...")
    test_key = 1
    expected_hash = "751e76e8199196d454941c45d1b3a323f1433bd6"
    
    ctx = secp256k1.lib.secp256k1_context_create(
        secp256k1.lib.SECP256K1_CONTEXT_SIGN | 
        secp256k1.lib.SECP256K1_CONTEXT_VERIFY)
    
    try:
        private_key = test_key.to_bytes(32, 'big')
        private_key_c = secp256k1.ffi.new("unsigned char [32]", private_key)
        
        pubkey = secp256k1.ffi.new('secp256k1_pubkey *')
        if not secp256k1.lib.secp256k1_ec_pubkey_create(ctx, pubkey, private_key_c):
            print("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞")
            return False
        
        out = secp256k1.ffi.new('unsigned char [33]')
        out_len = secp256k1.ffi.new('size_t *', 33)
        
        secp256k1.lib.secp256k1_ec_pubkey_serialize(
            ctx, out, out_len, pubkey, secp256k1.lib.SECP256K1_EC_COMPRESSED)
        
        pubkey_bytes = bytes(secp256k1.ffi.buffer(out, 33))
        actual_hash = double_hash(pubkey_bytes).hex()
        
        if actual_hash == expected_hash:
            print("‚úÖ –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_hash}, –ø–æ–ª—É—á–µ–Ω–æ {actual_hash}")
            return False
    finally:
        secp256k1.lib.secp256k1_context_destroy(ctx)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    print("\n" + "="*50)
    print(f"üîç –ü–æ–∏—Å–∫ –∫–ª—é—á–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º: {TARGET_PREFIX.hex()}")
    print(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —è–¥–µ—Ä: {NUM_THREADS}")
    print(f"üßÆ –í—Å–µ–≥–æ –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {KEYS_TO_CHECK:,}")
    print("="*50)
    
    # –ö–æ–º–ø–∏–ª—è—Ü–∏—è Numba
    print("\n‚öô –ö–æ–º–ø–∏–ª—è—Ü–∏—è Numba-—Ñ—É–Ω–∫—Ü–∏–π...", end=' ', flush=True)
    _ = numba_check_match(np.zeros(20, dtype=np.uint8))
    print("–ì–æ—Ç–æ–≤–æ!")
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if not test_hashing():
        sys.exit(1)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞
    random_start = random.randint(START_RANGE, END_RANGE - KEYS_TO_CHECK)
    print(f"\nüé≤ –°–ª—É—á–∞–π–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: 0x{random_start:064x}")
    
    progress = SpeedTracker(KEYS_TO_CHECK)
    found_flag = Value('b', False)
    found_key = Value(c_uint64, 0)
    balancer = WorkBalancer(random_start, random_start + KEYS_TO_CHECK)

    # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    processes = []
    for _ in range(NUM_THREADS):
        p = multiprocessing.Process(
            target=worker,
            args=(balancer, progress, found_flag, found_key),
            daemon=True
        )
        processes.append(p)
        p.start()
    
    # –ó–∞–ø—É—Å–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    display_process = multiprocessing.Process(
        target=display_progress,
        args=(progress, found_flag),
        daemon=True
    )
    display_process.start()

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    try:
        while not found_flag.value and not progress.should_stop():
            time.sleep(0.5)
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        found_flag.value = True
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    for p in processes:
        p.terminate()
    display_process.terminate()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    completed = progress.counter.value
    elapsed = time.time() - start_time
    
    print("\n" + "="*50)
    print("üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
    if found_flag.value:
        print(f"üîë –ù–∞–π–¥–µ–Ω –∫–ª—é—á: 0x{found_key.value:064x}")
    else:
        print("üîç –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    print(f"‚è± –ó–∞—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {elapsed:.1f} —Å–µ–∫")
    print(f"‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {completed/elapsed/1000:.1f}K keys/s")
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∫–ª—é—á–µ–π: {completed:,}")
    print("="*50)

if __name__ == "__main__":
    start_time = time.time()
    main()
