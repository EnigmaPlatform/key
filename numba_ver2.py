# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import os
import random
from numba import jit
import traceback
from multiprocessing import Manager, freeze_support
from colorama import init, Fore, Back, Style

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TEST_KEY = "0000000000000000000000000000000000000000000000000000000000000001"
TEST_HASH = "751e76e8199196d454941c45d1b3a323f1433bd6"
TARGET_HASH = "5db8cda53a6a002db10365967d7f85d19e171b10"
START_RANGE = 0x349b84b6431a5c4ef1
END_RANGE = 0x349b84b6431a6c4ef9
NUM_THREADS = max(8, os.cpu_count() + 4)  # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –ø–æ—Ç–æ–∫–æ–≤
MIN_UPDATE_INTERVAL = 1.0

# ==================== –£–õ–£–ß–®–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –ü–†–û–í–ï–†–ö–ò ====================

@jit(nopython=True)
def detect_repeats(key_hex):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å Numba"""
    max_repeats = 1
    current_repeats = 1
    prev_char = key_hex[0]
    
    for c in key_hex[1:]:
        if c == prev_char:
            current_repeats += 1
            if current_repeats > max_repeats:
                max_repeats = current_repeats
                if max_repeats >= 17:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω—ã–π –ø–æ–≤—Ç–æ—Ä
                    return max_repeats
        else:
            current_repeats = 1
        prev_char = c
    
    return max_repeats

def should_skip_key(key_hex):
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø—Ä—ã–∂–∫–æ–≤"""
    # –¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
    if key_hex == "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a":
        return False
    
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Numba
    repeat_count = detect_repeats(key_hex[-17:])  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 17 —Å–∏–º–≤–æ–ª–æ–≤
    if repeat_count >= 4:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ 4+ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö
        return True
    
    return False

def calculate_jump(key_hex, thread_id):
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä—ã–∂–∫–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –≥—Ä–∞–Ω–∏—Ü–∞–º–∏"""
    original = int(key_hex, 16)
    last_17 = key_hex[-17:]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    max_repeat = 1
    current_repeat = 1
    prev_char = last_17[0]
    
    for c in last_17[1:]:
        if c == prev_char:
            current_repeat += 1
            if current_repeat > max_repeat:
                max_repeat = current_repeat
        else:
            current_repeat = 1
        prev_char = c
    
    # –†–∞–∑–º–µ—Ä –ø—Ä—ã–∂–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    if max_repeat >= 12:
        jump_size = 0x100000000  # 1,048,576 –∫–ª—é—á–µ–π –¥–ª—è –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–≤—Ç–æ—Ä–æ–≤
    elif max_repeat >= 8:
        jump_size = 0x1000000   # 65,536 –∫–ª—é—á–µ–π
    elif max_repeat >= 6:
        jump_size = 0x10000    # 4,096 –∫–ª—é—á–µ–π
    elif max_repeat >= 4:
        jump_size = 0x100     # 256 –∫–ª—é—á–µ–π
    else:
        return original + 1   # –ë–µ–∑ –ø—Ä—ã–∂–∫–∞
    
    new_pos = original + jump_size
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏—Ö –ø—Ä—ã–∂–∫–æ–≤
    if jump_size >= 0x1000:
        print(f"{Fore.MAGENTA}[–ü–æ—Ç–æ–∫ {thread_id}] –ü—Ä—ã–∂–æ–∫ –Ω–∞ {jump_size:,} "
              f"–ø—Ä–∏ {max_repeat} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è—Ö: "
              f"0x...{key_hex[-8:]} ‚Üí 0x...{f'{new_pos:x}'[-8:]}{Style.RESET_ALL}")
    
    return min(new_pos, END_RANGE)

# ==================== –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê ====================

def process_range(thread_id, range_start, range_end, result_queue):
    """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –ø—Ä—ã–∂–∫–∞–º–∏"""
    try:
        current = range_start
        processed = 0
        skipped = 0
        last_update = time.time()
        
        while current <= range_end:
            key_hex = f"{current:064x}"
            
            if should_skip_key(key_hex):
                jump_to = calculate_jump(key_hex, thread_id)
                skipped += jump_to - current
                current = jump_to
                continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
            try:
                pub_key = coincurve.PublicKey.from_secret(bytes.fromhex(key_hex)).format(compressed=True)
                h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hexdigest()
                
                if h == TARGET_HASH:
                    result_queue.put(('found', key_hex))
                    return
                
                processed += 1
                
                # –û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
                if time.time() - last_update > 1.0:
                    result_queue.put(('progress', {
                        'thread_id': thread_id,
                        'current': current,
                        'processed': processed,
                        'skipped': skipped,
                        'speed': processed / max(1, time.time() - last_update)
                    }))
                    last_update = time.time()
                    
            except Exception as e:
                skipped += 1
            
            current += 1
        
        result_queue.put(('done', thread_id))
    except Exception as e:
        result_queue.put(('error', {'thread_id': thread_id, 'error': str(e), 'traceback': traceback.format_exc()}))

# ==================== –ò–ù–¢–ï–†–§–ï–ô–° –ò –í–´–í–û–î ====================

def print_progress(progress_data, jump_history):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')
    
    # –í—ã–≤–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    print(f"{Fore.CYAN}=== –ü–†–û–ì–†–ï–°–° –ü–û–ò–°–ö–ê ==={Style.RESET_ALL}")
    print(f"{Fore.YELLOW}–î–∏–∞–ø–∞–∑–æ–Ω: 0x{START_RANGE:016x} - 0x{END_RANGE:016x}{Style.RESET_ALL}")
    print(f"{Fore.GREEN}–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ç–æ–∫–∏: {sum(1 for p in progress_data.values() if p['active'])}/{NUM_THREADS}{Style.RESET_ALL}")
    
    # –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä—ã–∂–∫–æ–≤
    print(f"\n{Fore.MAGENTA}=== –ü–û–°–õ–ï–î–ù–ò–ï –ü–†–´–ñ–ö–ò ==={Style.RESET_ALL}")
    for jump in jump_history[-3:]:
        print(f"–ü–æ—Ç–æ–∫ {jump['thread_id']}: +{jump['to']-jump['from']:,} –∫–ª—é—á–µ–π (–ø—Ä–æ–ø—É—â–µ–Ω–æ {jump['skipped']:,})")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç–æ–∫–æ–≤
    print(f"\n{Fore.BLUE}=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–¢–û–ö–û–í ==={Style.RESET_ALL}")
    for tid in sorted(progress_data.keys()):
        data = progress_data[tid]
        status = f"{Fore.GREEN}–ê–∫—Ç–∏–≤–µ–Ω" if data['active'] else f"{Fore.RED}–ó–∞–≤–µ—Ä—à–µ–Ω"
        print(f"–ü–æ—Ç–æ–∫ {tid:2}: {status}{Style.RESET_ALL} | "
              f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {Fore.GREEN}{data['processed']:9,}{Style.RESET_ALL} | "
              f"–ü—Ä–æ–ø—É—â–µ–Ω–æ: {Fore.YELLOW}{data['skipped']:9,}{Style.RESET_ALL} | "
              f"–°–∫–æ—Ä–æ—Å—Ç—å: {Fore.CYAN}{data.get('speed', 0):7,.0f}/s{Style.RESET_ALL}")
    
    print(f"\n{Fore.YELLOW}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C{Style.RESET_ALL}")

# ==================== –û–°–ù–û–í–ù–ê–Ø –ü–†–û–ì–†–ê–ú–ú–ê ====================

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    manager = Manager()
    result_queue = manager.Queue()
    progress_data = manager.dict()
    jump_history = manager.list()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    total_range = END_RANGE - START_RANGE
    chunk_size = total_range // NUM_THREADS
    
    for tid in range(NUM_THREADS):
        start = START_RANGE + tid * chunk_size
        end = start + chunk_size - 1 if tid < NUM_THREADS - 1 else END_RANGE
        progress_data[tid] = manager.dict({
            'start': start,
            'end': end,
            'current': start,
            'processed': 0,
            'skipped': 0,
            'speed': 0,
            'active': True
        })
    
    print(f"\n{Fore.GREEN}=== –ó–ê–ü–£–°–ö –ü–û–ò–°–ö–ê ==={Style.RESET_ALL}")
    print(f"{Fore.YELLOW}–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {NUM_THREADS} –ø–æ—Ç–æ–∫–æ–≤{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}–î–∏–∞–ø–∞–∑–æ–Ω: 0x{START_RANGE:016x} - 0x{END_RANGE:016x}{Style.RESET_ALL}")
    time.sleep(2)
    
    try:
        with ProcessPoolExecutor(max_workers=NUM_THREADS) as executor:
            futures = [executor.submit(process_range, tid, 
                                      progress_data[tid]['start'],
                                      progress_data[tid]['end'],
                                      result_queue) 
                      for tid in range(NUM_THREADS)]
            
            active_threads = NUM_THREADS
            last_print_time = time.time()
            
            while active_threads > 0:
                while not result_queue.empty():
                    msg_type, data = result_queue.get_nowait()
                    
                    if msg_type == 'found':
                        print(f"\n{Fore.GREEN}üéâ –ö–ª—é—á –Ω–∞–π–¥–µ–Ω: 0x{data}{Style.RESET_ALL}")
                        return
                        
                    elif msg_type == 'progress':
                        progress_data[data['thread_id']].update(data)
                        
                    elif msg_type == 'jump':
                        progress_data[data['thread_id']]['skipped'] += data['skipped']
                        progress_data[data['thread_id']]['current'] = data['to']
                        jump_history.append(data)
                        if len(jump_history) > 10:
                            jump_history.pop(0)
                    
                    elif msg_type == 'done':
                        progress_data[data]['active'] = False
                        active_threads -= 1
                    
                    elif msg_type == 'error':
                        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {data['thread_id']}: {data['error']}{Style.RESET_ALL}")
                        print(data['traceback'])
                
                if time.time() - last_print_time >= MIN_UPDATE_INTERVAL:
                    print_progress(progress_data, jump_history)
                    last_print_time = time.time()
                
                time.sleep(0.1)
            
            print(f"\n{Fore.YELLOW}üîç –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω, –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω{Style.RESET_ALL}")
            
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}üõë –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}")
        traceback.print_exc()

if __name__ == "__main__":
    freeze_support()
    try:
        main()
    except Exception as e:
        print(f"\n{Fore.RED}‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}")
        traceback.print_exc()
