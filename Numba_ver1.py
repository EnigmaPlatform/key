# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import os
import json
from numba import jit
import traceback
from multiprocessing import Manager, freeze_support
from colorama import init, Fore, Back, Style
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "target_hash": "5db8cda53a6a002db10365967d7f85d19e171b10",
    "start_range": 0x349b84b6430a5c4ef9,
    "end_range": 0x349b84b6431a6c4ef9,
    "num_threads": max(8, os.cpu_count() + 6),
    "update_interval": 2.0,
    "state_file": "search_state.json"
}

@jit(nopython=True)
def detect_repeats_numba(key_part):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 17 —Å–∏–º–≤–æ–ª–∞—Ö"""
    max_repeats = 1
    current = 1
    for i in range(1, len(key_part)):
        if key_part[i] == key_part[i-1]:
            current += 1
            if current > max_repeats:
                max_repeats = current
                if max_repeats >= 14:
                    return max_repeats
        else:
            current = 1
    return max_repeats

def calculate_jump(key_hex, thread_id):
    """–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø—Ä—ã–∂–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    original = int(key_hex, 16)
    last_17 = key_hex[-17:]
    
    max_repeat = detect_repeats_numba(last_17)
    
    if max_repeat >= 14:
        jump_size = 0x100000000  # 4,294,967,296 –∫–ª—é—á–µ–π
    elif max_repeat >= 10:
        jump_size = 0x1000000    # 16,777,216 –∫–ª—é—á–µ–π
    elif max_repeat >= 7:
        jump_size = 0x10000      # 65,536 –∫–ª—é—á–µ–π
    elif max_repeat >= 4:
        jump_size = 0x100        # 256 –∫–ª—é—á–µ–π
    else:
        return original + 1      # –û–±—ã—á–Ω—ã–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç
    
    new_pos = original + jump_size
    
    if jump_size >= 0x1000000:
        print(f"{Fore.MAGENTA}[–ü–æ—Ç–æ–∫ {thread_id}] –ü—Ä—ã–∂–æ–∫ –Ω–∞ {jump_size:,} –∫–ª—é—á–µ–π: "
              f"0x{key_hex[-18:]} ‚Üí 0x{f'{new_pos:x}'[-18:]}{Style.RESET_ALL}")
    
    return min(new_pos, CONFIG['end_range'])

def process_chunk(thread_id, start, end, result_queue):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∫–ª—é—á–µ–π —Å –ø—Ä—ã–∂–∫–∞–º–∏"""
    current = start
    chunk_size = end - start
    chunk_start_time = time.time()
    last_update = chunk_start_time
    processed = 0
    
    while current <= end:
        key_hex = f"{current:064x}"
        key_last_17 = key_hex[-17:]
        
        if detect_repeats_numba(key_last_17) < 4:
            try:
                key_bytes = bytes.fromhex(key_hex)
                pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
                h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hexdigest()
                
                if h == CONFIG['target_hash']:
                    result_queue.put(('found', (thread_id, key_hex)))
                    return
                
                processed += 1
                
                now = time.time()
                if now - last_update >= CONFIG['update_interval']:
                    elapsed = now - chunk_start_time
                    speed = processed / elapsed
                    percent = (current - start) / chunk_size * 100
                    
                    result_queue.put(('progress', {
                        'thread_id': thread_id,
                        'current': current,
                        'last_key': key_hex,
                        'processed': processed,
                        'speed': speed,
                        'percent': percent,
                        'elapsed': elapsed
                    }))
                    last_update = now
            except Exception:
                pass
        
        current = calculate_jump(key_hex, thread_id)
    
    result_queue.put(('done', thread_id))

def run_benchmark():
    """–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print(f"\n{Fore.CYAN}=== –ó–ê–ü–£–°–ö –ë–ï–ù–ß–ú–ê–†–ö–ê ==={Style.RESET_ALL}")
    
    test_key = "a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2"
    start = time.time()
    count = 0
    while time.time() - start < 2.0:
        key_bytes = bytes.fromhex(test_key)
        pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
        h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest())
        count += 1
    speed = count / 2.0
    
    print(f"{Fore.GREEN}–°–∫–æ—Ä–æ—Å—Ç—å –æ–¥–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞: {speed:,.0f} –∫–ª—é—á–µ–π/—Å–µ–∫{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}–û–∂–∏–¥–∞–µ–º–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å ({CONFIG['num_threads']} –ø–æ—Ç–æ–∫–æ–≤): ~{speed * CONFIG['num_threads']:,.0f} –∫–ª—é—á–µ–π/—Å–µ–∫{Style.RESET_ALL}")
    
    return {'speed': speed}

def load_state():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(CONFIG['state_file']):
        return None
        
    print(f"\n{Fore.YELLOW}–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {CONFIG['state_file']}{Style.RESET_ALL}")
    choice = input("–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—Ç–∞? (y/n): ").strip().lower()
    if choice != 'y':
        return None
    
    try:
        with open(CONFIG['state_file'], 'r') as f:
            state = json.load(f)
        print(f"{Fore.GREEN}–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ{Style.RESET_ALL}")
        return state
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}{Style.RESET_ALL}")
        return None

def save_state(positions, processed):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    try:
        with open(CONFIG['state_file'], 'w') as f:
            json.dump({
                'positions': positions,
                'processed': processed,
                'config': CONFIG
            }, f, indent=2)
        return True
    except Exception as e:
        print(f"{Fore.RED}–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}{Style.RESET_ALL}")
        return False

def print_status(stats, last_keys):
    """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–æ–∏—Å–∫–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')
    
    print(f"{Fore.CYAN}=== –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ò–°–ö–ï ==={Style.RESET_ALL}")
    print(f"–ü–æ—Ç–æ–∫–æ–≤: {CONFIG['num_threads']} | –°–∫–æ—Ä–æ—Å—Ç—å: {stats['speed']:,.0f} –∫–ª—é—á–µ–π/—Å–µ–∫")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['processed']:,} –∫–ª—é—á–µ–π | –ü—Ä–æ–≥—Ä–µ—Å—Å: {stats['percent']:.18f}%")
    print(f"–ü—Ä–æ—à–ª–æ –≤—Ä–µ–º–µ–Ω–∏: {stats['elapsed']/60:.1f} –º–∏–Ω—É—Ç")
    
    print(f"\n{Fore.YELLOW}–ü–û–°–õ–ï–î–ù–ò–ï –ü–†–û–í–ï–†–ï–ù–ù–´–ï –ö–õ–Æ–ß–ò:{Style.RESET_ALL}")
    for tid in sorted(last_keys.keys()):
        print(f"–ü–æ—Ç–æ–∫ {tid:2}: 0x{last_keys[tid][-18:]}")
    
    if stats['percent'] > 0:
        remaining = (100 - stats['percent']) * stats['elapsed'] / stats['percent']
        print(f"\n{Fore.MAGENTA}–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏: ~{remaining/3600:.1f} —á–∞—Å–æ–≤{Style.RESET_ALL}")
        print(f"–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {time.ctime(time.time() + remaining)}")
    
    print(f"\n{Fore.WHITE}–î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C (—Å–æ—Å—Ç–æ—è–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ){Style.RESET_ALL}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    benchmark = run_benchmark()
    state = load_state()
    
    manager = Manager()
    result_queue = manager.Queue()
    last_keys = manager.dict()
    total_processed = manager.Value('i', 0)
    total_speed = manager.Value('f', 0.0)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ø–æ—Ç–æ–∫–æ–≤
    chunk_size = (CONFIG['end_range'] - CONFIG['start_range']) // CONFIG['num_threads']
    positions = []
    for tid in range(CONFIG['num_threads']):
        if state and 'positions' in state and tid < len(state['positions']):
            positions.append(state['positions'][tid])
        else:
            positions.append(CONFIG['start_range'] + tid * chunk_size)
        last_keys[tid] = f"{positions[tid]:064x}"  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫–ª—é—á–∞
    
    stats = {
        'processed': state['processed'] if state else 0,
        'speed': 0,
        'percent': 0,
        'elapsed': 0
    }
    
    try:
        with ProcessPoolExecutor(max_workers=CONFIG['num_threads']) as executor:
            futures = []
            for tid in range(CONFIG['num_threads']):
                start = positions[tid]
                end = CONFIG['start_range'] + (tid + 1) * chunk_size - 1 if tid < CONFIG['num_threads'] - 1 else CONFIG['end_range']
                futures.append(executor.submit(process_chunk, tid, start, end, result_queue))
            
            active_threads = CONFIG['num_threads']
            last_save_time = time.time()
            
            while active_threads > 0:
                if not result_queue.empty():
                    msg_type, data = result_queue.get()
                    
                    if msg_type == 'found':
                        tid, key = data
                        print(f"\n{Fore.GREEN}üéâ –ö–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ –ø–æ—Ç–æ–∫–µ {tid}: 0x{key}{Style.RESET_ALL}")
                        for future in futures:
                            future.cancel()
                        if os.path.exists(CONFIG['state_file']):
                            os.remove(CONFIG['state_file'])
                        return
                    
                    elif msg_type == 'progress':
                        tid = data['thread_id']
                        last_keys[tid] = data['last_key']
                        total_processed.value += data['processed']
                        
                        # –†–∞—Å—Å—á–µ—Ç –æ–±—â–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
                        if data['elapsed'] > 0:
                            current_speed = total_processed.value / data['elapsed']
                            total_speed.value = current_speed
                        
                        stats.update({
                            'processed': total_processed.value,
                            'speed': total_speed.value,
                            'percent': data['percent'],
                            'elapsed': data['elapsed']
                        })
                    
                    elif msg_type == 'done':
                        active_threads -= 1
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
                if time.time() - last_save_time >= CONFIG['update_interval']:
                    print_status(stats, dict(last_keys))
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                if time.time() - last_save_time > 300:
                    if save_state([last_keys[tid] for tid in range(CONFIG['num_threads'])], total_processed.value):
                        last_save_time = time.time()
                
                time.sleep(0.1)
            
            print(f"\n{Fore.YELLOW}–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.{Style.RESET_ALL}")
            if os.path.exists(CONFIG['state_file']):
                os.remove(CONFIG['state_file'])
    
    except KeyboardInterrupt:
        print(f"\n{Fore.YELLOW}–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...{Style.RESET_ALL}")
        save_state([last_keys[tid] for tid in range(CONFIG['num_threads'])], total_processed.value)
        print(f"{Fore.GREEN}–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ {CONFIG['state_file']}{Style.RESET_ALL}")
    except Exception as e:
        print(f"\n{Fore.RED}–û—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}")
        traceback.print_exc()
        save_state([last_keys[tid] for tid in range(CONFIG['num_threads'])], total_processed.value)

if __name__ == "__main__":
    freeze_support()
    main()
