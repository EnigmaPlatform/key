# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import os
import json
import threading
from multiprocessing import freeze_support
from colorama import init, Fore, Back, Style
import sys
import signal
import random
from datetime import datetime
import shutil
import re
from typing import Dict, Tuple, List
from numba import njit
import numpy as np

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama
init(autoreset=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = {
    "target_hash": "f6f5431d25bbf7b12e8add9af5e3475c44a0a5b8",
    "start_range": 0x400000000000000000,
    "end_range": 0x7fffffffffffffffff,
    "num_threads": 12,
    "check_range": 100_000_000,
    "max_attempts": 1_000_000,
    "state_file": "point_search_state.json",
    "backup_dir": "backups",
    "max_backups": 5,
    "update_interval": 1.0,
    "backup_interval": 300,
    "max_repeats": 4,
    "max_sequence": 4,
    "max_similar": 5,
    "min_key_length": 64
}

class BlockCounter:
    def __init__(self):
        self.count = 0
        self.lock = threading.Lock()
    
    def increment(self):
        with self.lock:
            self.count += 1
    
    def get_count(self):
        with self.lock:
            return self.count

block_counter = BlockCounter()

class Logger:
    def __init__(self):
        self.lock = threading.Lock()
    
    def log(self, message):
        with self.lock:
            print(message)
            sys.stdout.flush()

logger = Logger()

@njit
def is_sequence_numba(s: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Numba"""
    if len(s) < 2:
        return False
    
    delta = ord(s[1]) - ord(s[0])
    if delta == 0:
        return False
        
    for i in range(1, len(s)-1):
        if ord(s[i+1]) - ord(s[i]) != delta:
            return False
    return True

def is_valid_key(key_hex: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 17 —Å–∏–º–≤–æ–ª–æ–≤ –∫–ª—é—á–∞"""
    if len(key_hex) != CONFIG['min_key_length']:
        return False
    
    if not re.match(r'^0{46}[4-7][0-9a-f]{17}$', key_hex):
        return False
    
    last_17 = key_hex[-17:]
    
    if re.search(r'(.)\1{' + str(CONFIG['max_repeats']) + r',}', last_17):
        return False
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Numba-—É—Å–∫–æ—Ä–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
    for i in range(len(last_17) - CONFIG['max_sequence']):
        chunk = last_17[i:i+CONFIG['max_sequence']+1]
        if is_sequence_numba(chunk):
            return False
    
    char_counts = {}
    for char in last_17:
        char_counts[char] = char_counts.get(char, 0) + 1
        if char_counts[char] > CONFIG['max_similar']:
            return False
    
    bad_patterns = [
        r'(\d)\1{4,}',
        r'([a-f])\1{4,}',
        r'12345|23456|34567|45678|56789',
        r'abcde|bcdef',
        r'00000|11111|22222|33333|44444|55555|66666|77777|88888|99999',
        r'aaaaa|bbbbb|ccccc|ddddd|eeeee|fffff',
        r'01234|12345|23456|34567|45678|56789|6789a|789ab|89abc|9abcd|abcde|bcdef',
        r'dead|beef|face|feed|cafe|babe'
    ]
    
    for pattern in bad_patterns:
        if re.search(pattern, last_17, re.IGNORECASE):
            return False
    
    return True

def generate_valid_random_key() -> Tuple[int, str]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á"""
    attempts = 0
    max_attempts = 10000
    
    while attempts < max_attempts:
        attempts += 1
        first_char = str(random.choice([4,5,6,7]))
        random_part = ''.join(random.choice('0123456789abcdef') for _ in range(17))
        key_hex = '0'*46 + first_char + random_part
        
        if is_valid_key(key_hex):
            key_int = int(key_hex, 16)
            if CONFIG['start_range'] <= key_int <= CONFIG['end_range']:
                return (key_int, key_hex)
    
    raise ValueError(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫–ª—é—á –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")

def process_key(key_int: int, target_hash: str) -> Tuple[bool, str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω –∫–ª—é—á"""
    key_hex = "%064x" % key_int
    try:
        key_bytes = bytes.fromhex(key_hex)
        pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
        h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hexdigest()
        return (h == target_hash, key_hex)
    except:
        return (False, "")

def process_range(start_key: int, end_key: int, thread_id: int, progress_file: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª—é—á–µ–π –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ñ–∞–π–ª"""
    checked = 0
    start_time = time.time()
    
    try:
        for current in range(start_key, min(end_key, start_key + CONFIG['check_range']) + 1):
            found, key_hex = process_key(current, CONFIG['target_hash'])
            
            if found:
                with open(progress_file, 'a') as f:
                    f.write(f"FOUND {thread_id} {key_hex}\n")
                return
            
            checked += 1
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 –∫–ª—é—á–µ–π
            if checked % 10000 == 0:
                with open(progress_file, 'a') as f:
                    f.write(f"PROGRESS {thread_id} {checked} {current}\n")
    
    except Exception as e:
        with open(progress_file, 'a') as f:
            f.write(f"ERROR {thread_id} {str(e)}\n")

def monitor_progress(progress_file: str, total_keys: int, num_threads: int):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å"""
    stats = {i: {'checked': 0, 'current': 0, 'speed': 0} for i in range(num_threads)}
    start_time = time.time()
    last_update = time.time()
    
    try:
        # –û—á–∏—â–∞–µ–º —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        with open(progress_file, 'w') as f:
            pass
            
        while True:
            # –ß–∏—Ç–∞–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞
            try:
                with open(progress_file, 'r') as f:
                    lines = f.readlines()
            except FileNotFoundError:
                time.sleep(0.1)
                continue
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
            for line in lines:
                line = line.strip()
                if not line:
                    continue
                    
                parts = line.split()
                if parts[0] == "FOUND":
                    logger.log(f"\n{Fore.GREEN}üéâ –ù–∞–π–¥–µ–Ω –∫–ª—é—á –≤ –ø–æ—Ç–æ–∫–µ {parts[1]}: 0x{parts[2]}{Style.RESET_ALL}")
                    return True
                
                elif parts[0] == "PROGRESS":
                    thread_id = int(parts[1])
                    checked = int(parts[2])
                    current = int(parts[3])
                    stats[thread_id]['checked'] = checked
                    stats[thread_id]['current'] = current
                    stats[thread_id]['speed'] = checked / (time.time() - start_time + 0.0001)
                
                elif parts[0] == "ERROR":
                    logger.log(f"{Fore.RED}–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ {parts[1]}: {' '.join(parts[2:])}{Style.RESET_ALL}")
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
            current_time = time.time()
            if current_time - last_update >= 1.0:
                print_status(stats, total_keys)
                last_update = current_time
            
            time.sleep(0.1)
            
    except KeyboardInterrupt:
        return False

def print_status(stats: Dict, total_keys: int):
    """–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Å–∏–≤—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–∏—Å–∫–∞"""
    total_checked = sum(s['checked'] for s in stats.values())
    completion = (total_checked / total_keys) * 100
    total_speed = sum(s['speed'] for s in stats.values())
    blocks_generated = block_counter.get_count()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
    status_lines = [
        f"{Fore.CYAN}=== –ü–†–û–ì–†–ï–°–° –ü–û–ò–°–ö–ê ===",
        f"{Fore.YELLOW}–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ:{Style.RESET_ALL} {total_checked:,}/{total_keys:,} ({completion:.2f}%)",
        f"{Fore.YELLOW}–°–∫–æ—Ä–æ—Å—Ç—å:{Style.RESET_ALL} {total_speed:,.0f} –∫–ª—é—á/—Å–µ–∫",
        f"{Fore.YELLOW}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –±–ª–æ–∫–æ–≤:{Style.RESET_ALL} {blocks_generated}",
        f"\n{Fore.YELLOW}–°–¢–ê–¢–£–° –ü–û–¢–û–ö–û–í:{Style.RESET_ALL}"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–º—É –ø–æ—Ç–æ–∫—É
    for tid in sorted(stats.keys()):
        s = stats[tid]
        status_lines.append(
            f"–ü–æ—Ç–æ–∫ {tid}: {s['checked']:,} –∫–ª—é—á–µ–π | "
            f"–°–∫–æ—Ä–æ—Å—Ç—å: {s['speed']:,.0f}/—Å–µ–∫ | "
            f"–¢–µ–∫—É—â–∏–π: 0x{s['current']:x}"
        )
    
    # –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω –∏ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
    os.system('cls' if os.name == 'nt' else 'clear')
    logger.log('\n'.join(status_lines))

def test_hashing() -> bool:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.log(f"\n{Fore.CYAN}=== –¢–ï–°–¢ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø ==={Style.RESET_ALL}")
    
    test_vectors = [
        {
            'privkey': '0000000000000000000000000000000000000000000000000000000000000001',
            'hash160': '751e76e8199196d454941c45d1b3a323f1433bd6'
        },
        {
            'privkey': 'fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140',
            'hash160': 'adde4c73c7b9cee17da6c7b3e2b2eea1a0dcbe67'
        }
    ]
    
    all_ok = True
    for test in test_vectors:
        try:
            key_bytes = bytes.fromhex(test['privkey'])
            pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
            h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hexdigest()
            
            if h == test['hash160']:
                logger.log(f"{Fore.GREEN}‚úì –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è {test['privkey']}{Style.RESET_ALL}")
            else:
                logger.log(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –¥–ª—è {test['privkey']}{Style.RESET_ALL}")
                logger.log(f"  –û–∂–∏–¥–∞–ª–æ—Å—å: {test['hash160']}")
                logger.log(f"  –ü–æ–ª—É—á–µ–Ω–æ:  {h}")
                all_ok = False
        except Exception as e:
            logger.log(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –¥–ª—è {test['privkey']}: {e}{Style.RESET_ALL}")
            all_ok = False
    
    return all_ok

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    logger.log(f"{Fore.GREEN}–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã...{Style.RESET_ALL}")
    
    if not test_hashing():
        logger.log(f"{Fore.RED}–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.{Style.RESET_ALL}")
        return
    
    logger.log(f"{Fore.GREEN}–¢–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫...{Style.RESET_ALL}")
    
    try:
        progress_file = "search_progress.txt"
        total_keys = CONFIG['check_range']
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        monitor_thread = threading.Thread(
            target=monitor_progress,
            args=(progress_file, total_keys, CONFIG['num_threads'])
        )
        monitor_thread.daemon = True
        monitor_thread.start()
        
        # –î–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä—É –≤—Ä–µ–º—è –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
        time.sleep(1)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º worker-–ø—Ä–æ—Ü–µ—Å—Å—ã
        with ProcessPoolExecutor(max_workers=CONFIG['num_threads']) as executor:
            while True:
                start_key, current_key_hex = generate_valid_random_key()
                block_counter.increment()
                logger.log(f"\n{Fore.CYAN}–ù–æ–≤—ã–π –±–ª–æ–∫ –Ω–∞—á–∞—Ç: 0x{current_key_hex} (–í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {block_counter.get_count()}){Style.RESET_ALL}")
                
                # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –ø–æ –ø–æ—Ç–æ–∫–∞–º
                chunk_size = total_keys // CONFIG['num_threads']
                futures = []
                
                for i in range(CONFIG['num_threads']):
                    chunk_start = start_key + i * chunk_size
                    chunk_end = chunk_start + chunk_size - 1
                    
                    if i == CONFIG['num_threads'] - 1:
                        chunk_end = start_key + total_keys - 1
                    
                    futures.append(executor.submit(
                        process_range,
                        chunk_start,
                        chunk_end,
                        i,
                        progress_file
                    ))
                
                # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
                for future in futures:
                    future.result()
                
                logger.log(f"{Fore.GREEN}–ë–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {block_counter.get_count()}{Style.RESET_ALL}")
    
    except KeyboardInterrupt:
        logger.log(f"\n{Fore.YELLOW}–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.{Style.RESET_ALL}")
    except Exception as e:
        logger.log(f"\n{Fore.RED}–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}{Style.RESET_ALL}")
    finally:
        logger.log(f"{Fore.CYAN}–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.{Style.RESET_ALL}")

if __name__ == "__main__":
    freeze_support()
    logger.log(f"{Fore.YELLOW}–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã...{Style.RESET_ALL}")
    main()
