# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import math

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_HASH = "f6f5431d25bbf7b12e8add9af5e3475c44a0a5b8"
TEST_KEY = "0000000000000000000000000000000000000000000000000000000000000001"
START_KEY = 0x400000000000000000
END_KEY = 0x800000000000000000
THREADS = 8
REPORT_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

def test_hash():
    """–¢–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º"""
    print("="*50)
    print("üîß –¢–ï–°–¢ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    print(f"–ö–ª—é—á: {TEST_KEY}")
    key_bytes = bytes.fromhex(TEST_KEY)
    
    try:
        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞
        pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
        print(f"1. –ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {pub_key.hex()}")
        
        # 2. SHA256
        sha256 = hashlib.sha256(pub_key).digest()
        print(f"2. SHA256: {sha256.hex()}")
        
        # 3. RIPEMD160
        ripemd160 = hashlib.new('ripemd160', sha256).digest()
        print(f"3. RIPEMD160: {ripemd160.hex()}")
        
        # 4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print("\n–†–ï–ó–£–õ–¨–¢–ê–¢:")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π: {TARGET_HASH}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π: {ripemd160.hex()}")
        print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ –í–ï–†–ù–û' if ripemd160.hex() == TARGET_HASH else '‚ùå –ù–ï–í–ï–†–ù–û'}")
        
        return ripemd160.hex() == TARGET_HASH
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def process_range(start, end):
    """–ü–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∫–ª—é—á–µ–π"""
    current = start
    last_report = time.time()
    
    while current <= end:
        try:
            key_hex = f"{current:064x}"
            key_bytes = bytes.fromhex(key_hex)
            
            pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
            h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hex()
            
            if h == TARGET_HASH:
                return key_hex
                
            if time.time() - last_report >= REPORT_INTERVAL:
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π: {key_hex}")
                last_report = time.time()
                
        except Exception:
            pass
            
        current += 1
        
    return None

def main():
    if not test_hash():
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    
    print("\n" + "="*50)
    print(f"‚ö° –ü–û–ò–°–ö –ù–ê {THREADS} –Ø–î–†–ê–•")
    print(f"üîç –î–∏–∞–ø–∞–∑–æ–Ω: {hex(START_KEY)} - {hex(END_KEY)}")
    print(f"‚è± –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ {REPORT_INTERVAL//60} –º–∏–Ω")
    print("="*50 + "\n")
    
    start_time = time.time()
    
    with ProcessPoolExecutor(max_workers=THREADS) as executor:
        chunk_size = (END_KEY - START_KEY) // THREADS
        futures = []
        
        for i in range(THREADS):
            start = START_KEY + i * chunk_size
            end = start + chunk_size - 1 if i < THREADS - 1 else END_KEY
            futures.append(executor.submit(process_range, start, end))
        
        try:
            for future in futures:
                result = future.result()
                if result:
                    print("\n" + "="*50)
                    print(f"üéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù: {result}")
                    print("="*50)
                    for f in futures:
                        f.cancel()
                    break
        except KeyboardInterrupt:
            print("\n‚èπ –ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    print(f"\n‚åõ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {time.time() - start_time:.2f} —Å–µ–∫")

if __name__ == "__main__":
    main()
