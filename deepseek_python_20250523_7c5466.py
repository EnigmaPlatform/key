# -*- coding: utf-8 -*-
import multiprocessing
import hashlib
import coincurve
from tqdm import tqdm
from concurrent.futures import ProcessPoolExecutor, as_completed
import time
import sys

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_HASH = bytes.fromhex("f6f5431d25bbf7b12e8add9af5e3475c44a0a5b8")
START_KEY = 0x400000000000000000
END_KEY = 0x800000000000000000
CHUNK_SIZE = 1000000
THREADS = multiprocessing.cpu_count()
REPORT_INTERVAL = 1_000_000  # –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 1 –º–ª–Ω –∫–ª—é—á–µ–π

def process_chunk(start, end, result_queue):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∞ –∫–ª—é—á–µ–π —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    current = start
    while current <= end:
        try:
            key_hex = f"{current:064x}"
            key_bytes = bytes.fromhex(key_hex)
            pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
            h = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).digest()
            
            if h == TARGET_HASH:
                result_queue.put(('found', key_hex))
                return
                
            if current % 1000 == 0:
                result_queue.put(('progress', current))
                
            current += 1
            
        except Exception:
            current += 1
            continue
            
    result_queue.put(('done', end))

def format_key(key_int):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
    return f"{key_int:064x}"

def find_key_parallel():
    """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤"""
    print(f"\n‚ö° –ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —Å {THREADS} —è–¥—Ä–∞–º–∏")
    print(f"üîç –î–∏–∞–ø–∞–∑–æ–Ω: {hex(START_KEY)}-{hex(END_KEY)}")
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —Ö–µ—à: {TARGET_HASH.hex()}")
    total_keys = END_KEY - START_KEY + 1
    print(f"–í—Å–µ–≥–æ –∫–ª—é—á–µ–π: {total_keys:,}\n")

    manager = multiprocessing.Manager()
    result_queue = manager.Queue()
    start_time = time.time()
    last_report_key = START_KEY
    found_key = None
    last_progress_time = start_time
    last_progress_count = 0

    with ProcessPoolExecutor(max_workers=THREADS) as executor:
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
        chunk_starts = range(START_KEY, END_KEY + 1, (END_KEY - START_KEY) // THREADS + 1)
        futures = []
        
        for i in range(len(chunk_starts)):
            start = chunk_starts[i]
            end = chunk_starts[i + 1] - 1 if i < len(chunk_starts) - 1 else END_KEY
            futures.append(executor.submit(process_chunk, start, end, result_queue))

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = tqdm(total=total_keys, desc="–ü—Ä–æ–≥—Ä–µ—Å—Å", unit="key", 
                          bar_format="{l_bar}{bar}| {n_fmt}/{total_fmt} [{elapsed}<{remaining}]")
        
        while not found_key and any(not f.done() for f in futures):
            while not result_queue.empty():
                msg_type, data = result_queue.get()
                
                if msg_type == 'progress':
                    progress_bar.update(data - progress_bar.n)
                    
                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–∫–æ—Ä–æ—Å—Ç—å
                    current_time = time.time()
                    time_diff = current_time - last_progress_time
                    keys_diff = data - last_progress_count
                    
                    if time_diff > 0:
                        current_speed = keys_diff / time_diff
                    else:
                        current_speed = 0
                    
                    if data - last_report_key >= REPORT_INTERVAL:
                        sys.stdout.write('\033[F\033[K')
                        print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–ª—é—á: {format_key(data)} | –°–∫–æ—Ä–æ—Å—Ç—å: {current_speed:,.0f} keys/s")
                        last_report_key = data
                        last_progress_time = current_time
                        last_progress_count = data
                        
                elif msg_type == 'found':
                    found_key = data
                    for f in futures:
                        f.cancel()
                    break

    progress_bar.close()
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    elapsed = time.time() - start_time
    print(f"\n{'='*50}")
    print(f"–í—Å–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {elapsed:.2f} —Å–µ–∫")
    print(f"–°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {total_keys/max(1, elapsed):,.0f} keys/sec")
    
    if found_key:
        print(f"\nüéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù!")
        print(f"üîë –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: {found_key}")
    else:
        print(f"\nüîç –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    TEST_KEY = 0x349b84b6431a6c4ef1
    test_hex = f"{TEST_KEY:064x}"
    test_bytes = bytes.fromhex(test_hex)
    pub_key = coincurve.PublicKey.from_secret(test_bytes).format(compressed=True)
    sha256_hash = hashlib.sha256(pub_key).digest()
    ripemd160_hash = hashlib.new('ripemd160', sha256_hash).digest()
    test_hash = ripemd160_hash.hex()
    
    print("üîß –¢–µ—Å—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞:")
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {test_hex}")
    print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ö–µ—à: {test_hash}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ö–µ—à: {TARGET_HASH.hex()}")
    print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {test_hash == TARGET_HASH.hex()}\n")

    # –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    find_key_parallel()
