# -*- coding: utf-8 -*-
import hashlib
import coincurve
from concurrent.futures import ProcessPoolExecutor
import time
import math

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TARGET_HASH = "751e76e8199196d454941c45d1b3a323f1433bd6"
TEST_KEY = "0000000000000000000000000000000000000000000000000000000000000001"
START_KEY = 0x400000000000000000
END_KEY = 0x800000000000000000
THREADS = 8
REPORT_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
MIN_ENTROPY = 2.0      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è (–±–∏—Ç/–±–∞–π—Ç)
MIN_UNIQUE_BYTES = 32  # –ú–∏–Ω–∏–º—É–º 32 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–π—Ç–∞ –∏–∑ 64

def calculate_entropy(key_bytes):
    """–í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é –∫–ª—é—á–∞"""
    counts = {}
    for byte in key_bytes:
        counts[byte] = counts.get(byte, 0) + 1
    
    entropy = 0.0
    total = len(key_bytes)
    for count in counts.values():
        p = count / total
        entropy -= p * math.log2(p)
    
    return entropy

def is_valid_key(key_bytes):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º"""
    unique_bytes = len(set(key_bytes))
    entropy = calculate_entropy(key_bytes)
    return unique_bytes >= MIN_UNIQUE_BYTES and entropy >= MIN_ENTROPY

def test_hash():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("="*50)
    print("üîß –¢–ï–°–¢ –•–ï–®–ò–†–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    key_bytes = bytes.fromhex(TEST_KEY)
    print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á: {TEST_KEY}")
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–π—Ç–æ–≤: {len(set(key_bytes))}/64")
    print(f"–≠–Ω—Ç—Ä–æ–ø–∏—è: {calculate_entropy(key_bytes):.2f} –±–∏—Ç/–±–∞–π—Ç")
    print(f"–í–∞–ª–∏–¥–Ω–æ—Å—Ç—å: {'‚úÖ –î–∞' if is_valid_key(key_bytes) else '‚ùå –ù–µ—Ç (–ø—Ä–æ–ø—É—Å—Ç–∏—Ç –ø—Ä–∏ –ø–æ–∏—Å–∫–µ)'}")
    
    try:
        print("\n1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–ª—é—á–∞...")
        pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
        print(f"–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: {pub_key.hex()}")
        
        print("\n2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ SHA256...")
        sha256 = hashlib.sha256(pub_key).digest()
        print(f"SHA256: {sha256.hex()}")
        
        print("\n3. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ RIPEMD160...")
        ripemd160 = hashlib.new('ripemd160', sha256).digest()
        print(f"RIPEMD160: {ripemd160.hex()}")
        
        print("\n4. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º —Ö–µ—à–µ–º:")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π: {TARGET_HASH}")
        print(f"–ü–æ–ª—É—á–µ–Ω–Ω—ã–π: {ripemd160.hex()}")
        print(f"–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {'‚úÖ –í–µ—Ä–Ω–æ' if ripemd160.hex() == TARGET_HASH else '‚ùå –ù–µ–≤–µ—Ä–Ω–æ'}")
        
        return ripemd160.hex() == TARGET_HASH
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        return False

def process_range(start, end):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –∫–ª—é—á–µ–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    current = start
    last_report = time.time()
    
    while current <= end:
        try:
            key_hex = f"{current:064x}"
            key_bytes = bytes.fromhex(key_hex)
            
            if not is_valid_key(key_bytes):
                current += 1
                continue
                
            pub_key = coincurve.PublicKey.from_secret(key_bytes).format(compressed=True)
            ripemd160 = hashlib.new('ripemd160', hashlib.sha256(pub_key).digest()).hex()
            
            if ripemd160 == TARGET_HASH:
                return f"–ù–∞–π–¥–µ–Ω –∫–ª—é—á: {key_hex}"
                
            if time.time() - last_report >= REPORT_INTERVAL:
                print(f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫–ª—é—á: {key_hex}")
                last_report = time.time()
                
        except Exception:
            pass
            
        current += 1
        
    return None

def main():
    if not test_hash():
        print("\n‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!")
        return
    
    print(f"\n‚ö° –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ —Å {THREADS} –ø–æ—Ç–æ–∫–∞–º–∏")
    print(f"üîç –î–∏–∞–ø–∞–∑–æ–Ω: {hex(START_KEY)} - {hex(END_KEY)}")
    print(f"‚è± –û—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ {REPORT_INTERVAL//60} –º–∏–Ω—É—Ç\n")
    
    start_time = time.time()
    
    with ProcessPoolExecutor(max_workers=THREADS) as executor:
        chunk_size = (END_KEY - START_KEY) // THREADS
        futures = []
        
        for i in range(THREADS):
            start = START_KEY + i * chunk_size
            end = start + chunk_size - 1 if i < THREADS - 1 else END_KEY
            futures.append(executor.submit(process_range, start, end))
        
        try:
            for future in futures:
                result = future.result()
                if result:
                    print("\n" + "="*50)
                    print(result)
                    print("="*50)
                    for f in futures:
                        f.cancel()
                    break
        except KeyboardInterrupt:
            print("\n‚èπ –ü–æ–∏—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
            for f in futures:
                f.cancel()
    
    print(f"\n–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {time.time() - start_time:.2f} —Å–µ–∫—É–Ω–¥")

if __name__ == "__main__":
    main()
